package net.sayaya.ui.style;

import elemental2.core.JsObject;
import elemental2.dom.CSSProperties;
import elemental2.dom.CSSStyleDeclaration;
import jsinterop.base.Js;
import jsinterop.base.JsPropertyMap;
import lombok.Data;
import lombok.experimental.Accessors;

@Data
@Accessors(fluent=true)
public class Style {
	public static Style build() {
		return new Style();
	}
	private String alignContent;
	private String alignItems;
	private String alignSelf;
	private String all;
	private String animation;
	private String animationDelay;
	private String animationDirection;
	private String animationDuration;
	private String animationFillMode;
	private String animationIterationCount;
	private String animationName;
	private String animationPlayState;
	private String animationTimingFunction;
	private String azimuth;
	private String backfaceVisibility;
	private String backgroundAttachment;
	private String backgroundBlendMode;
	private String backgroundClip;
	private String backgroundColor;
	private String backgroundImage;
	private String backgroundOrigin;
	private String backgroundPosition;
	private String backgroundRepeat;
	private String backgroundSize;
	private String background;
	private String bleed;
	private String borderBottomColor;
	private String borderBottomLeftRadius;
	private String borderBottomRightRadius;
	private String borderBottomStyle;
	private String borderBottomWidth;
	private String borderBottom;
	private String borderCollapse;
	private String borderColor;
	private String borderImage;
	private String borderImageOutset;
	private String borderImageRepeat;
	private String borderImageSource;
	private String borderImageSlice;
	private String borderImageWidth;
	private String borderLeftColor;
	private String borderLeftStyle;
	private String borderLeftWidth;
	private String borderLeft;
	private String borderRadius;
	private String borderRightColor;
	private String borderRightStyle;
	private String borderRightWidth;
	private String borderRight;
	private String borderSpacing;
	private String borderStyle;
	private String borderTopColor;
	private String borderTopLeftRadius;
	private String borderTopRightRadius;
	private String borderTopStyle;
	private String borderTopWidth;
	private String borderTop;
	private String borderWidth;
	private String border;
	private String bottom;
	private String boxDecorationBreak;
	private String boxShadow;
	private String boxSizing;
	private String breakAfter;
	private String breakBefore;
	private String breakInside;
	private String captionSide;
	private String caretColor;
	private String clear;
	private String clip;
	private String color;
	private String columns;
	private String columnCount;
	private String columnFill;
	private String columnGap;
	private String columnRule;
	private String columnRuleColor;
	private String columnRuleStyle;
	private String columnRuleWidth;
	private String columnSpan;
	private String columnWidth;
	private String content;
	private String counterIncrement;
	private String counterReset;
	private String cueAfter;
	private String cueBefore;
	private String cue;
	private String cursor;
	private String direction;
	private String display;
	private String elevation;
	private String emptyCells;
	private String filter;
	private String flex;
	private String flexBasis;
	private String flexDirection;
	private String fontFeatureSettings;
	private String flexFlow;
	private Double flexGrow;
	private Double flexShrink;
	private String flexWrap;
	private String cssFloat;
	private String fontFamily;
	private String fontKerning;
	private String fontLanguageOverride;
	private String fontSizeAdjust;
	private String fontSize;
	private String fontStretch;
	private String fontStyle;
	private String fontSynthesis;
	private String fontVariant;
	private String fontVariantAlternates;
	private String fontVariantCaps;
	private String fontVariantEastAsian;
	private String fontVariantLigatures;
	private String fontVariantNumeric;
	private String fontVariantPosition;
	private String fontWeight;
	private String font;
	private String gridArea;
	private String gridAutoColumns;
	private String gridAutoFlow;
	private String gridAutoRows;
	private String gridColumnEnd;
	private String gridColumnGap;
	private String gridColumnStart;
	private String gridColumn;
	private String gridGap;
	private String gridRowEnd;
	private String gridRowGap;
	private String gridRowStart;
	private String gridRow;
	private String gridTemplateAreas;
	private String gridTemplateColumns;
	private String gridTemplateRows;
	private String gridTemplate;
	private String grid;
	private String hangingPunctuation;
	private String height;
	private String hyphens;
	private String isolation;
	private String justifyContent;
	private String justifyItems;
	private String justifySelf;
	private String left;
	private String letterSpacing;
	private String lineBreak;
	private String lineHeight;
	private String listStyleImage;
	private String listStylePosition;
	private String listStyleType;
	private String listStyle;
	private String marginBottom;
	private String marginLeft;
	private String marginRight;
	private String marginTop;
	private String margin;
	private String markerOffset;
	private String marks;
	private String maxHeight;
	private String maxWidth;
	private String minHeight;
	private String minWidth;
	private String mixBlendMode;
	private String navUp;
	private String navDown;
	private String navLeft;
	private String navRight;
	private String opacity;
	private Double order;
	private String orphans;
	private String outlineColor;
	private String outlineOffset;
	private String outlineStyle;
	private String outlineWidth;
	private String outline;
	private String overflow;
	private String overflowWrap;
	private String overflowX;
	private String overflowY;
	private String paddingBottom;
	private String paddingLeft;
	private String paddingRight;
	private String paddingTop;
	private String padding;
	private String pageBreakAfter;
	private String pageBreakBefore;
	private String pageBreakInside;
	private String page;
	private String pauseAfter;
	private String pauseBefore;
	private String pause;
	private String perspective;
	private String perspectiveOrigin;
	private String pitchRange;
	private String pitch;
	private String placeContent;
	private String placeItems;
	private String placeSelf;
	private String playDuring;
	private String position;
	private String quotes;
	private String resize;
	private String restAfter;
	private String restBefore;
	private String rest;
	private String richness;
	private String right;
	private String size;
	private String speakHeader;
	private String speakNumeral;
	private String speakPunctuation;
	private String speak;
	private String speechRate;
	private String stress;
	private String tabSize;
	private String tableLayout;
	private String textAlign;
	private String textAlignLast;
	private String textDecoration;
	private String textDecorationColor;
	private String textDecorationLine;
	private String textDecorationSkip;
	private String textDecorationStyle;
	private String textIndent;
	private String textOverflow;
	private String textShadow;
	private String textTransform;
	private String textUnderlinePosition;
	private String top;
	private String transform;
	private String transformOrigin;
	private String transformStyle;
	private String transition;
	private String transitionDelay;
	private String transitionDuration;
	private String transitionProperty;
	private String transitionTimingFunction;
	private String unicodeBidi;
	private String verticalAlign;
	private String visibility;
	private String voiceBalance;
	private String voiceDuration;
	private String voiceFamily;
	private String voicePitch;
	private String voiceRange;
	private String voiceRate;
	private String voiceStress;
	private String voiceVolume;
	private String volume;
	private String whiteSpace;
	private String widows;
	private String width;
	private String willChange;
	private String wordBreak;
	private String wordSpacing;
	private String wordWrap;
	private String zIndex;

	private Style() {}
	public void apply(CSSStyleDeclaration declaration) {
		declaration.alignContent = alignContent;
		declaration.alignItems = alignItems;
		declaration.alignSelf = alignSelf;
		// declaration.all = all;
		// declaration.animation = animation;
		// declaration.animationDelay = animationDelay;
		// declaration.animationDirection = animationDirection;
		// declaration.animationDuration = animationDuration;
		// declaration.animationFillMode = animationFillMode;
		// declaration.animationIterationCount = animationIterationCount;
		// declaration.animationName = animationName;
		// declaration.animationPlayState = animationPlayState;
		// declaration.animationTimingFunction = animationTimingFunction;
		declaration.azimuth = azimuth;
		declaration.backfaceVisibility = backfaceVisibility;
		declaration.backgroundAttachment = backgroundAttachment;
		//declaration.backgroundBlendMode = backgroundBlendMode;
		//declaration.backgroundClip = backgroundClip;
		declaration.backgroundColor = backgroundColor;
		declaration.backgroundImage = backgroundImage;
		//declaration.backgroundOrigin = backgroundOrigin;
		declaration.backgroundPosition = backgroundPosition;
		declaration.backgroundRepeat = backgroundRepeat;
		declaration.backgroundSize = backgroundSize;
		declaration.background = background;
		// declaration.bleed = bleed;
		declaration.borderBottomColor = borderBottomColor;
		declaration.borderBottomLeftRadius = CSSProperties.BorderBottomLeftRadiusUnionType.of(borderBottomLeftRadius);
		declaration.borderBottomRightRadius = CSSProperties.BorderBottomRightRadiusUnionType.of(borderBottomRightRadius);
		declaration.borderBottomStyle = borderBottomStyle;
		declaration.borderBottomWidth = CSSProperties.BorderBottomWidthUnionType.of(borderBottomWidth);
		declaration.borderBottom = borderBottom;
		declaration.borderCollapse = borderCollapse;
		declaration.borderColor = borderColor;
		declaration.borderImage = borderImage;
		declaration.borderImageOutset = CSSProperties.BorderImageOutsetUnionType.of(borderImageOutset);
		declaration.borderImageRepeat = borderImageRepeat;
		declaration.borderImageSource = borderImageSource;
		declaration.borderImageSlice = CSSProperties.BorderImageSliceUnionType.of(borderImageSlice);
		declaration.borderImageWidth = CSSProperties.BorderImageWidthUnionType.of(borderImageWidth);
		declaration.borderLeftColor = borderLeftColor;
		declaration.borderLeftStyle = borderLeftStyle;
		declaration.borderLeftWidth = CSSProperties.BorderLeftWidthUnionType.of(borderLeftWidth);
		declaration.borderLeft = borderLeft;
		declaration.borderRadius = CSSProperties.BorderRadiusUnionType.of(borderRadius);
		declaration.borderRightColor = borderRightColor;
		declaration.borderRightStyle = borderRightStyle;
		declaration.borderRightWidth = CSSProperties.BorderRightWidthUnionType.of(borderRightWidth);
		declaration.borderRight = borderRight;
		declaration.borderSpacing = borderSpacing;
		declaration.borderStyle = borderStyle;
		declaration.borderTopColor = borderTopColor;
		declaration.borderTopLeftRadius = CSSProperties.BorderTopLeftRadiusUnionType.of(borderTopLeftRadius);
		declaration.borderTopRightRadius = CSSProperties.BorderTopRightRadiusUnionType.of(borderTopRightRadius);
		declaration.borderTopStyle = borderTopStyle;
		declaration.borderTopWidth = CSSProperties.BorderTopWidthUnionType.of(borderTopWidth);
		declaration.borderTop = borderTop;
		declaration.borderWidth = CSSProperties.BorderWidthUnionType.of(borderWidth);
		declaration.border = border;
		declaration.bottom = bottom;
		//declaration.boxDecorationBreak = boxDecorationBreak;
		declaration.boxShadow = boxShadow;
		declaration.boxSizing = boxSizing;
		//declaration.breakAfter = breakAfter;
		//declaration.breakBefore = breakBefore;
		//declaration.breakInside = breakInside;
		declaration.captionSide = captionSide;
		//declaration.caretColor = caretColor;
		declaration.clear = clear;
		declaration.clip = clip;
		declaration.color = color;
		//declaration.columns = columns;
		//declaration.columnCount = columnCount;
		//declaration.columnFill = columnFill;
		//declaration.columnGap = columnGap;
		//declaration.columnRule = columnRule;
		//declaration.columnRuleColor = columnRuleColor;
		//declaration.columnRuleStyle = columnRuleStyle;
		//declaration.columnRuleWidth = columnRuleWidth;
		//declaration.columnSpan = columnSpan;
		//declaration.columnWidth = columnWidth;
		declaration.content = content;
		if(counterIncrement!=null) declaration.counterIncrement = counterIncrement;
		if(counterReset!=null) declaration.counterReset = counterReset;
		declaration.cueAfter = cueAfter;
		declaration.cueBefore = cueBefore;
		declaration.cue = cue;
		declaration.cursor = cursor;
		declaration.direction = direction;
		declaration.display = display;
		declaration.elevation = elevation;
		declaration.emptyCells = emptyCells;
		//declaration.filter = filter;
		declaration.flex = flex;
		declaration.flexBasis = flexBasis;
		declaration.flexDirection = flexDirection;
		//declaration.fontFeatureSettings = fontFeatureSettings;
		declaration.flexFlow = flexFlow;
		if(flexGrow!=null) declaration.flexGrow = flexGrow;
		if(flexShrink!=null) declaration.flexShrink = flexShrink;
		declaration.flexWrap = flexWrap;
		declaration.cssFloat = cssFloat;
		if(fontFamily!=null) declaration.fontFamily = fontFamily;
		//declaration.fontKerning = fontKerning;
		//declaration.fontLanguageOverride = fontLanguageOverride;
		declaration.fontSizeAdjust = fontSizeAdjust;
		declaration.fontSize = CSSProperties.FontSizeUnionType.of(fontSize);
		declaration.fontStretch = fontStretch;
		declaration.fontStyle = fontStyle;
		//declaration.fontSynthesis = fontSynthesis;
		declaration.fontVariant = fontVariant;
		//declaration.fontVariantAlternates = fontVariantAlternates;
		//declaration.fontVariantCaps = fontVariantCaps;
		//declaration.fontVariantEastAsian = fontVariantEastAsian;
		//declaration.fontVariantLigatures = fontVariantLigatures;
		//declaration.fontVariantNumeric = fontVariantNumeric;
		//declaration.fontVariantPosition = fontVariantPosition;
		declaration.fontWeight = fontWeight;
		declaration.font = font;
		//declaration.gridArea = gridArea;
		//declaration.gridAutoColumns = gridAutoColumns;
		//declaration.gridAutoFlow = gridAutoFlow;
		//declaration.gridAutoRows = gridAutoRows;
		//declaration.gridColumnEnd = gridColumnEnd;
		//declaration.gridColumnGap = gridColumnGap;
		//declaration.gridColumnStart = gridColumnStart;
		//declaration.gridColumn = gridColumn;
		//declaration.gridGap = gridGap;
		//declaration.gridRowEnd = gridRowEnd;
		//declaration.gridRowGap = gridRowGap;
		//declaration.gridRowStart = gridRowStart;
		//declaration.gridRow = gridRow;
		//declaration.gridTemplateAreas = gridTemplateAreas;
		//declaration.gridTemplateColumns = gridTemplateColumns;
		//declaration.gridTemplateRows = gridTemplateRows;
		//declaration.gridTemplate = gridTemplate;
		//declaration.grid = grid;
		//declaration.hangingPunctuation = hangingPunctuation;
		declaration.height = CSSProperties.HeightUnionType.of(height);
		//declaration.hyphens = hyphens;
		//declaration.isolation = isolation;
		declaration.justifyContent = justifyContent;
		//declaration.justifyItems = justifyItems;
		//declaration.justifySelf = justifySelf;
		declaration.left = left;
		declaration.letterSpacing = letterSpacing;
		//declaration.lineBreak = lineBreak;
		declaration.lineHeight = CSSProperties.LineHeightUnionType.of(lineHeight);
		declaration.listStyleImage = listStyleImage;
		declaration.listStylePosition = listStylePosition;
		declaration.listStyleType = listStyleType;
		declaration.listStyle = listStyle;
		declaration.marginBottom = CSSProperties.MarginBottomUnionType.of(marginBottom);
		declaration.marginLeft = CSSProperties.MarginLeftUnionType.of(marginLeft);
		declaration.marginRight = CSSProperties.MarginRightUnionType.of(marginRight);
		declaration.marginTop = CSSProperties.MarginTopUnionType.of(marginTop);
		declaration.margin = CSSProperties.MarginUnionType.of(margin);
		declaration.markerOffset = markerOffset;
		declaration.marks = marks;
		declaration.maxHeight = CSSProperties.MaxHeightUnionType.of(maxHeight);
		declaration.maxWidth = CSSProperties.MaxWidthUnionType.of(maxWidth);
		declaration.minHeight = CSSProperties.MinHeightUnionType.of(minHeight);
		declaration.minWidth = CSSProperties.MinWidthUnionType.of(minWidth);
		//declaration.mixBlendMode = mixBlendMode;
		//declaration.navUp = navUp;
		//declaration.navDown = navDown;
		//declaration.navLeft = navLeft;
		//declaration.navRight = navRight;
		declaration.opacity = CSSProperties.OpacityUnionType.of(opacity);
		if(order!=null) declaration.order = order;
		declaration.orphans = orphans;
		declaration.outlineColor = outlineColor;
		//declaration.outlineOffset = outlineOffset;
		declaration.outlineStyle = outlineStyle;
		declaration.outlineWidth = CSSProperties.OutlineWidthUnionType.of(outlineWidth);
		declaration.outline = outline;
		declaration.overflow = overflow;
		//declaration.overflowWrap = overflowWrap;
		//declaration.overflowX = overflowX;
		//declaration.overflowY = overflowY;
		declaration.paddingBottom = CSSProperties.PaddingBottomUnionType.of(paddingBottom);
		declaration.paddingLeft = CSSProperties.PaddingLeftUnionType.of(paddingLeft);
		declaration.paddingRight = CSSProperties.PaddingRightUnionType.of(paddingRight);
		declaration.paddingTop = CSSProperties.PaddingTopUnionType.of(paddingTop);
		declaration.padding = CSSProperties.PaddingUnionType.of(padding);
		declaration.pageBreakAfter = pageBreakAfter;
		declaration.pageBreakBefore = pageBreakBefore;
		declaration.pageBreakInside = pageBreakInside;
		if(page!=null) declaration.page = page;
		declaration.pauseAfter = pauseAfter;
		declaration.pauseBefore = pauseBefore;
		declaration.pause = pause;
		declaration.perspective = perspective;
		declaration.perspectiveOrigin = CSSProperties.PerspectiveOriginUnionType.of(perspectiveOrigin);
		declaration.pitchRange = pitchRange;
		declaration.pitch = pitch;
		//declaration.placeContent = placeContent;
		//declaration.placeItems = placeItems;
		//declaration.placeSelf = placeSelf;
		declaration.playDuring = playDuring;
		declaration.position = position;
		declaration.quotes = quotes;
		declaration.resize = resize;
		//declaration.restAfter = restAfter;
		//declaration.restBefore = restBefore;
		//declaration.rest = rest;
		declaration.richness = richness;
		declaration.right = right;
		declaration.size = size;
		declaration.speakHeader = speakHeader;
		declaration.speakNumeral = speakNumeral;
		declaration.speakPunctuation = speakPunctuation;
		declaration.speak = speak;
		declaration.speechRate = speechRate;
		declaration.stress = stress;
		//declaration.tabSize = tabSize;
		declaration.tableLayout = tableLayout;
		declaration.textAlign = textAlign;
		//declaration.textAlignLast = textAlignLast;
		declaration.textDecoration = textDecoration;
		//declaration.textDecorationColor = textDecorationColor;
		//declaration.textDecorationLine = textDecorationLine;
		//declaration.textDecorationSkip = textDecorationSkip;
		//declaration.textDecorationStyle = textDecorationStyle;
		declaration.textIndent = textIndent;
		declaration.textOverflow = textOverflow;
		declaration.textShadow = textShadow;
		declaration.textTransform = textTransform;
		//declaration.textUnderlinePosition = textUnderlinePosition;
		declaration.top = top;
		declaration.transform = transform;
		declaration.transformOrigin = CSSProperties.TransformOriginUnionType.of(transformOrigin);
		declaration.transformStyle = transformStyle;
		if(transition!=null) declaration.transition = transition;
		declaration.transitionDelay = transitionDelay;
		declaration.transitionDuration = transitionDuration;
		if(transitionProperty!=null) declaration.transitionProperty = transitionProperty;
		declaration.transitionTimingFunction = transitionTimingFunction;
		declaration.unicodeBidi = unicodeBidi;
		declaration.verticalAlign = verticalAlign;
		declaration.visibility = visibility;
		//declaration.voiceBalance = voiceBalance;
		//declaration.voiceDuration = voiceDuration;
		declaration.voiceFamily = voiceFamily;
		//declaration.voicePitch = voicePitch;
		//declaration.voiceRange = voiceRange;
		//declaration.voiceRate = voiceRate;
		//declaration.voiceStress = voiceStress;
		//declaration.voiceVolume = voiceVolume;
		declaration.volume = volume;
		declaration.whiteSpace = whiteSpace;
		declaration.widows = widows;
		declaration.width = CSSProperties.WidthUnionType.of(width);
		if(willChange!=null) declaration.willChange = willChange;
		//declaration.wordBreak = wordBreak;
		declaration.wordSpacing = wordSpacing;
		declaration.wordWrap = wordWrap;
		declaration.zIndex = CSSProperties.ZIndexUnionType.of(zIndex);
	}

	public JsObject toObject() {
		JsObject obj = new JsObject();
		JsPropertyMap<Object> map = Js.asPropertyMap(obj);
		map.set("alignContent", alignContent);
		map.set("alignItems", alignItems);
		map.set("alignSelf", alignSelf);
		// map.set("all", all);
		// map.set("animation", animation);
		// map.set("animationDelay", animationDelay);
		// map.set("animationDirection", animationDirection);
		// map.set("animationDuration", animationDuration);
		// map.set("animationFillMode", animationFillMode);
		// map.set("animationIterationCount", animationIterationCount);
		// map.set("animationName", animationName);
		// map.set("animationPlayState", animationPlayState);
		// map.set("animationTimingFunction", animationTimingFunction);
		map.set("azimuth", azimuth);
		map.set("backfaceVisibility", backfaceVisibility);
		map.set("backgroundAttachment", backgroundAttachment);
		//map.set("backgroundBlendMode", backgroundBlendMode);
		//map.set("backgroundClip", backgroundClip);
		map.set("backgroundColor", backgroundColor);
		map.set("backgroundImage", backgroundImage);
		//map.set("backgroundOrigin", backgroundOrigin);
		map.set("backgroundPosition", backgroundPosition);
		map.set("backgroundRepeat", backgroundRepeat);
		map.set("backgroundSize", backgroundSize);
		map.set("background", background);
		// map.set("bleed", bleed);
		map.set("borderBottomColor", borderBottomColor);
		map.set("borderBottomLeftRadius", CSSProperties.BorderBottomLeftRadiusUnionType.of(borderBottomLeftRadius));
		map.set("borderBottomRightRadius", CSSProperties.BorderBottomRightRadiusUnionType.of(borderBottomRightRadius));
		map.set("borderBottomStyle", borderBottomStyle);
		map.set("borderBottomWidth", CSSProperties.BorderBottomWidthUnionType.of(borderBottomWidth));
		map.set("borderBottom", borderBottom);
		map.set("borderCollapse", borderCollapse);
		map.set("borderColor", borderColor);
		map.set("borderImage", borderImage);
		map.set("borderImageOutset", CSSProperties.BorderImageOutsetUnionType.of(borderImageOutset));
		map.set("borderImageRepeat", borderImageRepeat);
		map.set("borderImageSource", borderImageSource);
		map.set("borderImageSlice", CSSProperties.BorderImageSliceUnionType.of(borderImageSlice));
		map.set("borderImageWidth", CSSProperties.BorderImageWidthUnionType.of(borderImageWidth));
		map.set("borderLeftColor", borderLeftColor);
		map.set("borderLeftStyle", borderLeftStyle);
		map.set("borderLeftWidth", CSSProperties.BorderLeftWidthUnionType.of(borderLeftWidth));
		map.set("borderLeft", borderLeft);
		map.set("borderRadius", CSSProperties.BorderRadiusUnionType.of(borderRadius));
		map.set("borderRightColor", borderRightColor);
		map.set("borderRightStyle", borderRightStyle);
		map.set("borderRightWidth", CSSProperties.BorderRightWidthUnionType.of(borderRightWidth));
		map.set("borderRight", borderRight);
		map.set("borderSpacing", borderSpacing);
		map.set("borderStyle", borderStyle);
		map.set("borderTopColor", borderTopColor);
		map.set("borderTopLeftRadius", CSSProperties.BorderTopLeftRadiusUnionType.of(borderTopLeftRadius));
		map.set("borderTopRightRadius", CSSProperties.BorderTopRightRadiusUnionType.of(borderTopRightRadius));
		map.set("borderTopStyle", borderTopStyle);
		map.set("borderTopWidth", CSSProperties.BorderTopWidthUnionType.of(borderTopWidth));
		map.set("borderTop", borderTop);
		map.set("borderWidth", CSSProperties.BorderWidthUnionType.of(borderWidth));
		map.set("border", border);
		map.set("bottom", bottom);
		//map.set("boxDecorationBreak", boxDecorationBreak);
		map.set("boxShadow", boxShadow);
		map.set("boxSizing", boxSizing);
		//map.set("breakAfter", breakAfter);
		//map.set("breakBefore", breakBefore);
		//map.set("breakInside", breakInside);
		map.set("captionSide", captionSide);
		//map.set("caretColor", caretColor);
		map.set("clear", clear);
		map.set("clip", clip);
		map.set("color", color);
		//map.set("columns", columns);
		//map.set("columnCount", columnCount);
		//map.set("columnFill", columnFill);
		//map.set("columnGap", columnGap);
		//map.set("columnRule", columnRule);
		//map.set("columnRuleColor", columnRuleColor);
		//map.set("columnRuleStyle", columnRuleStyle);
		//map.set("columnRuleWidth", columnRuleWidth);
		//map.set("columnSpan", columnSpan);
		//map.set("columnWidth", columnWidth);
		map.set("content", content);
		if(counterIncrement!=null) map.set("counterIncrement", counterIncrement);
		if(counterReset!=null) map.set("counterReset", counterReset);
		map.set("cueAfter", cueAfter);
		map.set("cueBefore", cueBefore);
		map.set("cue", cue);
		map.set("cursor", cursor);
		map.set("direction", direction);
		map.set("display", display);
		map.set("elevation", elevation);
		map.set("emptyCells", emptyCells);
		//map.set("filter", filter);
		map.set("flex", flex);
		map.set("flexBasis", flexBasis);
		map.set("flexDirection", flexDirection);
		//map.set("fontFeatureSettings", fontFeatureSettings);
		map.set("flexFlow", flexFlow);
		if(flexGrow!=null) map.set("flexGrow", flexGrow);
		if(flexShrink!=null) map.set("flexShrink", flexShrink);
		map.set("flexWrap", flexWrap);
		map.set("cssFloat", cssFloat);
		if(fontFamily!=null) map.set("fontFamily", fontFamily);
		//map.set("fontKerning", fontKerning);
		//map.set("fontLanguageOverride", fontLanguageOverride);
		map.set("fontSizeAdjust", fontSizeAdjust);
		map.set("fontSize", CSSProperties.FontSizeUnionType.of(fontSize));
		map.set("fontStretch", fontStretch);
		map.set("fontStyle", fontStyle);
		//map.set("fontSynthesis", fontSynthesis);
		map.set("fontVariant", fontVariant);
		//map.set("fontVariantAlternates", fontVariantAlternates);
		//map.set("fontVariantCaps", fontVariantCaps);
		//map.set("fontVariantEastAsian", fontVariantEastAsian);
		//map.set("fontVariantLigatures", fontVariantLigatures);
		//map.set("fontVariantNumeric", fontVariantNumeric);
		//map.set("fontVariantPosition", fontVariantPosition);
		map.set("fontWeight", fontWeight);
		map.set("font", font);
		//map.set("gridArea", gridArea);
		//map.set("gridAutoColumns", gridAutoColumns);
		//map.set("gridAutoFlow", gridAutoFlow);
		//map.set("gridAutoRows", gridAutoRows);
		//map.set("gridColumnEnd", gridColumnEnd);
		//map.set("gridColumnGap", gridColumnGap);
		//map.set("gridColumnStart", gridColumnStart);
		//map.set("gridColumn", gridColumn);
		//map.set("gridGap", gridGap);
		//map.set("gridRowEnd", gridRowEnd);
		//map.set("gridRowGap", gridRowGap);
		//map.set("gridRowStart", gridRowStart);
		//map.set("gridRow", gridRow);
		//map.set("gridTemplateAreas", gridTemplateAreas);
		//map.set("gridTemplateColumns", gridTemplateColumns);
		//map.set("gridTemplateRows", gridTemplateRows);
		//map.set("gridTemplate", gridTemplate);
		//map.set("grid", grid);
		//map.set("hangingPunctuation", hangingPunctuation);
		map.set("height", CSSProperties.HeightUnionType.of(height));
		//map.set("hyphens", hyphens);
		//map.set("isolation", isolation);
		map.set("justifyContent", justifyContent);
		//map.set("justifyItems", justifyItems);
		//map.set("justifySelf", justifySelf);
		map.set("left", left);
		map.set("letterSpacing", letterSpacing);
		//map.set("lineBreak", lineBreak);
		map.set("lineHeight", CSSProperties.LineHeightUnionType.of(lineHeight));
		map.set("listStyleImage", listStyleImage);
		map.set("listStylePosition", listStylePosition);
		map.set("listStyleType", listStyleType);
		map.set("listStyle", listStyle);
		map.set("marginBottom", CSSProperties.MarginBottomUnionType.of(marginBottom));
		map.set("marginLeft", CSSProperties.MarginLeftUnionType.of(marginLeft));
		map.set("marginRight", CSSProperties.MarginRightUnionType.of(marginRight));
		map.set("marginTop", CSSProperties.MarginTopUnionType.of(marginTop));
		map.set("margin", CSSProperties.MarginUnionType.of(margin));
		map.set("markerOffset", markerOffset);
		map.set("marks", marks);
		map.set("maxHeight", CSSProperties.MaxHeightUnionType.of(maxHeight));
		map.set("maxWidth", CSSProperties.MaxWidthUnionType.of(maxWidth));
		map.set("minHeight", CSSProperties.MinHeightUnionType.of(minHeight));
		map.set("minWidth", CSSProperties.MinWidthUnionType.of(minWidth));
		//map.set("mixBlendMode", mixBlendMode);
		//map.set("navUp", navUp);
		//map.set("navDown", navDown);
		//map.set("navLeft", navLeft);
		//map.set("navRight", navRight);
		map.set("opacity", CSSProperties.OpacityUnionType.of(opacity));
		if(order!=null) map.set("order", order);
		map.set("orphans", orphans);
		map.set("outlineColor", outlineColor);
		//map.set("outlineOffset", outlineOffset);
		map.set("outlineStyle", outlineStyle);
		map.set("outlineWidth", CSSProperties.OutlineWidthUnionType.of(outlineWidth));
		map.set("outline", outline);
		map.set("overflow", overflow);
		//map.set("overflowWrap", overflowWrap);
		//map.set("overflowX", overflowX);
		//map.set("overflowY", overflowY);
		map.set("paddingBottom", CSSProperties.PaddingBottomUnionType.of(paddingBottom));
		map.set("paddingLeft", CSSProperties.PaddingLeftUnionType.of(paddingLeft));
		map.set("paddingRight", CSSProperties.PaddingRightUnionType.of(paddingRight));
		map.set("paddingTop", CSSProperties.PaddingTopUnionType.of(paddingTop));
		map.set("padding", CSSProperties.PaddingUnionType.of(padding));
		map.set("pageBreakAfter", pageBreakAfter);
		map.set("pageBreakBefore", pageBreakBefore);
		map.set("pageBreakInside", pageBreakInside);
		if(page!=null) map.set("page", page);
		map.set("pauseAfter", pauseAfter);
		map.set("pauseBefore", pauseBefore);
		map.set("pause", pause);
		map.set("perspective", perspective);
		map.set("perspectiveOrigin", CSSProperties.PerspectiveOriginUnionType.of(perspectiveOrigin));
		map.set("pitchRange", pitchRange);
		map.set("pitch", pitch);
		//map.set("placeContent", placeContent);
		//map.set("placeItems", placeItems);
		//map.set("placeSelf", placeSelf);
		map.set("playDuring", playDuring);
		map.set("position", position);
		map.set("quotes", quotes);
		map.set("resize", resize);
		//map.set("restAfter", restAfter);
		//map.set("restBefore", restBefore);
		//map.set("rest", rest);
		map.set("richness", richness);
		map.set("right", right);
		map.set("size", size);
		map.set("speakHeader", speakHeader);
		map.set("speakNumeral", speakNumeral);
		map.set("speakPunctuation", speakPunctuation);
		map.set("speak", speak);
		map.set("speechRate", speechRate);
		map.set("stress", stress);
		//map.set("tabSize", tabSize);
		map.set("tableLayout", tableLayout);
		map.set("textAlign", textAlign);
		//map.set("textAlignLast", textAlignLast);
		map.set("textDecoration", textDecoration);
		//map.set("textDecorationColor", textDecorationColor);
		//map.set("textDecorationLine", textDecorationLine);
		//map.set("textDecorationSkip", textDecorationSkip);
		//map.set("textDecorationStyle", textDecorationStyle);
		map.set("textIndent", textIndent);
		map.set("textOverflow", textOverflow);
		map.set("textShadow", textShadow);
		map.set("textTransform", textTransform);
		//map.set("textUnderlinePosition", textUnderlinePosition);
		map.set("top", top);
		map.set("transform", transform);
		map.set("transformOrigin", CSSProperties.TransformOriginUnionType.of(transformOrigin));
		map.set("transformStyle", transformStyle);
		if(transition!=null) map.set("transition", transition);
		map.set("transitionDelay", transitionDelay);
		map.set("transitionDuration", transitionDuration);
		if(transitionProperty!=null) map.set("transitionProperty", transitionProperty);
		map.set("transitionTimingFunction", transitionTimingFunction);
		map.set("unicodeBidi", unicodeBidi);
		map.set("verticalAlign", verticalAlign);
		map.set("visibility", visibility);
		//map.set("voiceBalance", voiceBalance);
		//map.set("voiceDuration", voiceDuration);
		map.set("voiceFamily", voiceFamily);
		//map.set("voicePitch", voicePitch);
		//map.set("voiceRange", voiceRange);
		//map.set("voiceRate", voiceRate);
		//map.set("voiceStress", voiceStress);
		//map.set("voiceVolume", voiceVolume);
		map.set("volume", volume);
		map.set("whiteSpace", whiteSpace);
		map.set("widows", widows);
		map.set("width", CSSProperties.WidthUnionType.of(width));
		if(willChange!=null) map.set("willChange", willChange);
		//map.set("wordBreak", wordBreak);
		map.set("wordSpacing", wordSpacing);
		map.set("wordWrap", wordWrap);
		map.set("zIndex", CSSProperties.ZIndexUnionType.of(zIndex));
		return obj;
	}
}
